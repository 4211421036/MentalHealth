name: Batch Auto Merge Pull Requests

on:
  # Jalankan secara terjadwal setiap jam
  schedule:
    - cron: '5 * * * *'
  # Atau jalankan secara manual dari tab Actions di GitHub
  workflow_dispatch:

jobs:
  batch-merge-open-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup GitHub CLI
        uses: cli/cli-action@v2
        
      - name: Auto-merge open pull requests
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUTHOR_USERNAME: "4211421036"
        run: |
          # Dapatkan semua pull requests yang terbuka
          echo "Mencari open pull requests yang memenuhi kriteria..."
          
          # Filter pull requests yang terbuka:
          PR_LIST=$(gh pr list --author $AUTHOR_USERNAME --state open --json number,title,headRefName,baseRefName --jq '.[]')
          
          if [ -z "$PR_LIST" ]; then
            echo "Tidak ada open pull requests yang memenuhi kriteria untuk di-merge"
          else
            echo "$PR_LIST" | while read -r pr; do
              PR_NUMBER=$(echo "$pr" | jq -r '.number')
              PR_TITLE=$(echo "$pr" | jq -r '.title')
              HEAD_BRANCH=$(echo "$pr" | jq -r '.headRefName')
              BASE_BRANCH=$(echo "$pr" | jq -r '.baseRefName')
              
              echo "Mencoba auto-merge open PR #$PR_NUMBER: $PR_TITLE dari branch $HEAD_BRANCH ke $BASE_BRANCH"
              
              # Coba approve PR terlebih dahulu (jika dibutuhkan)
              gh pr review $PR_NUMBER --approve || echo "Tidak bisa approve PR #$PR_NUMBER"
              
              # Coba merge PR
              if gh pr merge $PR_NUMBER --merge --delete-branch; then
                echo "✅ Berhasil merge open PR #$PR_NUMBER"
              else
                echo "❌ Gagal merge open PR #$PR_NUMBER. Cek konflik atau proteksi branch."
              fi
            done
          fi
  
  reopen-and-merge-closed-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup GitHub CLI
        uses: cli/cli-action@v2
        
      - name: Reopen and merge closed pull requests
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUTHOR_USERNAME: "4211421036"
        run: |
          # Dapatkan semua pull requests yang closed
          echo "Mencari closed pull requests untuk di-reopen dan di-merge..."
          
          # Filter pull requests yang tertutup dalam 7 hari terakhir (sesuaikan jika perlu)
          CLOSED_PR_LIST=$(gh pr list --author $AUTHOR_USERNAME --state closed --limit 50 --json number,title,headRefName,baseRefName,closedAt --jq '.[] | select(.closedAt > (now - 604800 | todate))')
          
          if [ -z "$CLOSED_PR_LIST" ]; then
            echo "Tidak ada closed pull requests yang memenuhi kriteria"
          else
            echo "$CLOSED_PR_LIST" | while read -r pr; do
              PR_NUMBER=$(echo "$pr" | jq -r '.number')
              PR_TITLE=$(echo "$pr" | jq -r '.title')
              HEAD_BRANCH=$(echo "$pr" | jq -r '.headRefName')
              BASE_BRANCH=$(echo "$pr" | jq -r '.baseRefName')
              
              echo "Mencoba reopen dan merge closed PR #$PR_NUMBER: $PR_TITLE"
              
              # Cek apakah branch masih ada
              if gh api repos/${{ github.repository }}/branches/$HEAD_BRANCH --silent; then
                # Coba reopen PR yang sudah closed
                if gh pr reopen $PR_NUMBER; then
                  echo "✅ Berhasil reopen PR #$PR_NUMBER"
                  
                  # Coba approve dan merge PR
                  gh pr review $PR_NUMBER --approve || echo "Tidak bisa approve PR #$PR_NUMBER"
                  
                  if gh pr merge $PR_NUMBER --merge --delete-branch; then
                    echo "✅ Berhasil merge reopened PR #$PR_NUMBER"
                  else
                    echo "❌ Gagal merge reopened PR #$PR_NUMBER. Cek konflik atau proteksi branch."
                  fi
                else
                  echo "❌ Gagal reopen PR #$PR_NUMBER"
                fi
              else
                echo "⚠️ Branch $HEAD_BRANCH untuk PR #$PR_NUMBER sudah tidak ada"
              fi
            done
          fi

  # Job terpisah untuk menangani PR dari Dependabot
  dependabot-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup GitHub CLI
        uses: cli/cli-action@v2
        
      - name: Auto-merge Dependabot PRs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Mencari Dependabot pull requests..."
          
          # Tangani Dependabot PRs yang terbuka
          DEPENDABOT_PRS=$(gh pr list --author "dependabot[bot]" --state open --json number,title --jq '.[]')
          
          if [ -z "$DEPENDABOT_PRS" ]; then
            echo "Tidak ada Dependabot PRs terbuka yang perlu di-merge"
          else
            echo "$DEPENDABOT_PRS" | while read -r pr; do
              PR_NUMBER=$(echo "$pr" | jq -r '.number')
              PR_TITLE=$(echo "$pr" | jq -r '.title')
              
              echo "Mencoba auto-merge Dependabot PR #$PR_NUMBER: $PR_TITLE"
              
              # Approve PR dari Dependabot
              gh pr review $PR_NUMBER --approve
              
              # Enable auto-merge untuk PR Dependabot (kecuali major version updates)
              if [[ "$PR_TITLE" != *"major"* ]]; then
                if gh pr merge $PR_NUMBER --merge --auto; then
                  echo "✅ Berhasil set auto-merge untuk PR #$PR_NUMBER"
                else
                  echo "❌ Gagal set auto-merge untuk PR #$PR_NUMBER"
                fi
              else
                echo "⚠️ Skipping major version update PR #$PR_NUMBER untuk review manual"
              fi
            done
          fi
          
          # Tangani Dependabot PRs yang closed
          echo "Mencari closed Dependabot pull requests..."
          CLOSED_DEPENDABOT_PRS=$(gh pr list --author "dependabot[bot]" --state closed --limit 30 --json number,title,closedAt --jq '.[] | select(.closedAt > (now - 604800 | todate))')
          
          if [ -z "$CLOSED_DEPENDABOT_PRS" ]; then
            echo "Tidak ada closed Dependabot PRs yang perlu ditangani"
          else
            echo "$CLOSED_DEPENDABOT_PRS" | while read -r pr; do
              PR_NUMBER=$(echo "$pr" | jq -r '.number')
              PR_TITLE=$(echo "$pr" | jq -r '.title')
              
              echo "Mencoba reopen dan merge closed Dependabot PR #$PR_NUMBER: $PR_TITLE"
              
              # Coba reopen PR
              if gh pr reopen $PR_NUMBER; then
                echo "✅ Berhasil reopen Dependabot PR #$PR_NUMBER"
                
                # Coba approve dan merge PR
                gh pr review $PR_NUMBER --approve
                
                if gh pr merge $PR_NUMBER --merge --delete-branch; then
                  echo "✅ Berhasil merge reopened Dependabot PR #$PR_NUMBER"
                else
                  echo "❌ Gagal merge reopened Dependabot PR #$PR_NUMBER"
                fi
              else
                echo "❌ Gagal reopen Dependabot PR #$PR_NUMBER"
              fi
            done
          fi
